// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios12.1-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CXHubCore
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import CXHubCore
import Foundation
import Security
import Swift
import _Concurrency
import _StringProcessing
@_inheritsConvenienceInitializers @objc public class CXKeychainSwiftCBridge : ObjectiveC.NSObject {
  public var lastResultCode: Darwin.OSStatus {
    get
  }
  public var accessGroup: Swift.String? {
    get
    set
  }
  public var synchronizable: Swift.Bool {
    get
    set
  }
  @discardableResult
  @objc public func set(_ value: Swift.String, forKey key: Swift.String) -> Swift.Bool
  @discardableResult
  @objc public func setData(_ value: Foundation.Data, forKey key: Swift.String) -> Swift.Bool
  @discardableResult
  @objc public func setBool(_ value: Swift.Bool, forKey key: Swift.String) -> Swift.Bool
  @objc public func get(_ key: Swift.String) -> Swift.String?
  @objc public func getData(_ key: Swift.String) -> Foundation.Data?
  public func getBool(_ key: Swift.String) -> Swift.Bool?
  @discardableResult
  @objc public func delete(_ key: Swift.String) -> Swift.Bool
  @discardableResult
  @objc public func clear() -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
open class CXKeychain {
  open var lastResultCode: Darwin.OSStatus
  open var accessGroup: Swift.String?
  open var synchronizable: Swift.Bool
  public init()
  public init(keyPrefix: Swift.String)
  @discardableResult
  open func set(_ value: Swift.String, forKey key: Swift.String, withAccess access: CXHubCore.CXKeychainAccessOptions? = nil) -> Swift.Bool
  @discardableResult
  open func set(_ value: Foundation.Data, forKey key: Swift.String, withAccess access: CXHubCore.CXKeychainAccessOptions? = nil) -> Swift.Bool
  @discardableResult
  open func set(_ value: Swift.Bool, forKey key: Swift.String, withAccess access: CXHubCore.CXKeychainAccessOptions? = nil) -> Swift.Bool
  open func get(_ key: Swift.String) -> Swift.String?
  open func getData(_ key: Swift.String, asReference: Swift.Bool = false) -> Foundation.Data?
  open func getBool(_ key: Swift.String) -> Swift.Bool?
  @discardableResult
  open func delete(_ key: Swift.String) -> Swift.Bool
  public var allKeys: [Swift.String] {
    get
  }
  @discardableResult
  open func clear() -> Swift.Bool
  @objc deinit
}
public struct CXKeychainConstants {
  public static var accessGroup: Swift.String {
    get
  }
  public static var accessible: Swift.String {
    get
  }
  public static var attrAccount: Swift.String {
    get
  }
  public static var attrSynchronizable: Swift.String {
    get
  }
  public static var klass: Swift.String {
    get
  }
  public static var matchLimit: Swift.String {
    get
  }
  public static var returnData: Swift.String {
    get
  }
  public static var valueData: Swift.String {
    get
  }
  public static var returnReference: Swift.String {
    get
  }
  public static var returnAttributes: Swift.String {
    get
  }
  public static var secMatchLimitAll: Swift.String {
    get
  }
}
public enum CXKeychainAccessOptions {
  case accessibleWhenUnlocked
  case accessibleWhenUnlockedThisDeviceOnly
  case accessibleAfterFirstUnlock
  case accessibleAfterFirstUnlockThisDeviceOnly
  case accessibleWhenPasscodeSetThisDeviceOnly
  public static func == (a: CXHubCore.CXKeychainAccessOptions, b: CXHubCore.CXKeychainAccessOptions) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension CXHubCore.CXKeychainAccessOptions : Swift.Equatable {}
extension CXHubCore.CXKeychainAccessOptions : Swift.Hashable {}
